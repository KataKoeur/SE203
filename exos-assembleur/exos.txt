# Exercices de compilation

## Exercice 1

Traduire en assembleur ARM le code suivant :
uint32_t a; // global variable
...
for (uint8_t i=0; i<=a; i++)
{
  g();
}

Q: Même question si i est un unsigned int. Conclusion ?
R: De mon point de vue, il n'y a aucune différence entre les 2 programmes car le variable i est initialisé à 0 et incrémenté jusqu'a à. Néanmoins, le compilateur ajoute ligne ci-dessous en plus lorsque i est signé:

mov	r4, r4, asl #24
bl	g
mov	r4, r4, asr #24

## Exercice 2

Traduire en assembleur ARM le code suivant :
uint32_t *a; // global variable
uint32_t *b; // global variable
uint32_t *c; // global variable
...
*a += *c;
*b += *c;

Comparez avec ce que produit GCC, ainsi :
void f() 
{
	*a += *c ;
	*b += *c ;
}
Puis : arm-none-eabi-gcc -O2 -S t.c -o -

Q: Pourquoi GCC charge-t-il deux fois le contenu de *c au lieu d'une seule ?
R: Le premier chargement permet de c permet d'obtenir le contenu à l'adresse c. Tandi que le second chargement de c permet d'obtenir le contenu pointé par l'adresse c. 

ldr	r3, .L2		; r3 = &c
ldr	r1, [r3]	; r1 = c
ldr	ip, [r1]	; ip = *c
.L2: .word c